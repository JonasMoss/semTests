hs_model <- " visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 "
## Estimation that IS allowed.
m1 <- lavaan::cfa(hs_model,
data = lavaan::HolzingerSwineford1939,
group = "school", estimator = "MLM"
)
m0 <- lavaan::cfa(hs_model,
data = lavaan::HolzingerSwineford1939,
group = "school", estimator = "MLM", group.equal = "loadings"
)
model <- "A =~ A1+A2+A3+A4+A5;
C =~ C1+C2+C3+C4+C5"
n <- 50
object <- lavaan::sem(model, psych::bfi[1:n, 1:10], estimator = "MLM")
data <- bollen_stine_transform(m0)
devtools::load_all(".")
hs_model <- " visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 "
## Estimation that IS allowed.
m1 <- lavaan::cfa(hs_model,
data = lavaan::HolzingerSwineford1939,
group = "school", estimator = "MLM"
)
m0 <- lavaan::cfa(hs_model,
data = lavaan::HolzingerSwineford1939,
group = "school", estimator = "MLM", group.equal = "loadings"
)
model <- "A =~ A1+A2+A3+A4+A5;
C =~ C1+C2+C3+C4+C5"
n <- 50
object <- lavaan::sem(model, psych::bfi[1:n, 1:10], estimator = "MLM")
data <- bollen_stine_transform(m0)
## Estimation that isn't allowed.
m1_ <- lavaan::cfa(hs_model,
data = lavaan::HolzingerSwineford1939,
group = "school", estimator = "GLS"
)
m0_ <- lavaan::cfa(hs_model,
data = lavaan::HolzingerSwineford1939,
group = "school", estimator = "GLS", group.equal = "loadings"
)
test_that("pvalues_two return p_values in (0, 1)", {
pvals <- pvalues_two(m0, m1, eba = 2, trad = "psb")
expect_true(all(pvals < 1))
expect_true(all(pvals > 0))
})
test_that("estimators other than ml do not work.", {
expect_error(pvalues_two(m0_, m1_, eba = 2, trad = "psb"))
#expect_error(pvalues_one(m0_, eba = 2, trad = "psb", unbiased = 2))
})
test_that("pvalues_one return p_values in (0, 1)", {
pvals <- pvalues_one(object , eba = 2, unbiased = 2, trad = "psb")
expect_true(all(pvals < 1))
expect_true(all(pvals > 0))
})
test_that("pvalues_two and pvalues / pvalues_one and pvalues agree", {
expect_equal(pvalues(object, eba = 2, trad = "psb", unbiased = 2),
pvalues_one(object, eba = 2, trad = "psb", unbiased = 2))
expect_equal(
pvalues_two(m0, m1, eba = 2, trad = "psb", unbiased = FALSE),
pvalues(m0, m1, eba = 2, trad = "psb", unbiased = 1)
)
})
test_that("models with groups and equality not supported.", {
expect_error(pvalues_one(m0, eba = c(1:2), trad = "psb", unbiased = TRUE))
})
test_that("semselector works for one model", {
set.seed(313)
sel <- semselector(object, n_reps = 2, unbiased = 3, distances = "anderson-darling")
expect_equal(dim(sel), c(1, 3))
})
test_that("bootstrapper runs, two models.", {
boots <- bootstrapper(m0, m1, functional = identity, n_reps = 1)
expect_equal(dim(boots), c(2, 1))
})
test_that("semselector works for one model", {
set.seed(313)
sel <- semselector(object, n_reps = 2, unbiased = 3, distances = "anderson-darling")
expect_equal(dim(sel), c(1, 3))
})
devtools::load_all(".")
test_that("semselector works for one model", {
set.seed(313)
sel <- semselector(object, n_reps = 2, unbiased = 3, distances = "anderson-darling")
expect_equal(dim(sel), c(1, 3))
})
test_that("bootstrapper runs, two models.", {
boots <- bootstrapper(m0, m1, functional = identity, n_reps = 1)
expect_equal(dim(boots), c(2, 1))
})
devtools::load_all(".")
test_that("bootstrapper runs, two models.", {
boots <- bootstrapper(m0, m1, functional = identity, n_reps = 1)
expect_equal(dim(boots), c(2, 1))
})
test_that("bootstrapper runs, one models", {
boots <- bootstrapper(m0, m1 = NULL, functional = identity, n_reps = 2)
expect_equal(length(boots), 2)
})
test_that("bollens_stine_transform works", {
s <- s_and_s_inv(object)
lhs <- lapply(seq(object@SampleStats@ngroups), function(i) {
data <- object@Data@X[[i]]
s_sqrt <- s[[i]]$s_sqrt
s_inv_sqrt <- s[[i]]$s_inv_sqrt
frame <- data.frame(as.matrix(data) %*% s_inv_sqrt %*% s_sqrt)
colnames(frame) <- object@Data@ov.names[[i]]
frame
})
rhs <- bollen_stine_transform(object)
expect_equal(lhs, rhs)
})
test_that("bootstrap runs", {
set.seed(313)
boot_1 <- bootstrap(m0, m0, data)
set.seed(313)
boot_2 <- bootstrap(m0, data = data)
expect_equal(boot_2, boot_2)
})
test_that("s_and_s_inv works", {
lhs <- lapply(seq(object@SampleStats@ngroups), function(i) {
s_hat <- lavaan::lav_model_implied(object@Model)$cov[[i]]
s_inv_hat <- object@SampleStats@icov[[i]]
list(
s_sqrt = lavaan::lav_matrix_symmetric_sqrt(s_hat),
s_inv_sqrt = lavaan::lav_matrix_symmetric_sqrt(s_inv_hat)
)
})
rhs <- s_and_s_inv(object)
expect_equal(lhs, rhs)
})
devtools::load_all(".")
test_that("bootstrapper runs, two models.", {
boots <- bootstrapper(m0, m1, functional = identity, n_reps = 1)
expect_equal(dim(boots), c(2, 1))
})
devtools::load_all(".")
test_that("bootstrapper runs, two models.", {
boots <- bootstrapper(m0, m1, functional = identity, n_reps = 1)
expect_equal(dim(boots), c(2, 1))
})
devtools::load_all(".")
test_that("bootstrapper runs, two models.", {
boots <- bootstrapper(m0, m1, functional = identity, n_reps = 1)
expect_equal(dim(boots), c(2, 1))
})
devtools::load_all(".")
test_that("bootstrapper runs, two models.", {
boots <- bootstrapper(m0, m1, functional = identity, n_reps = 1)
expect_equal(dim(boots), c(2, 1))
})
test_that("bootstrapper runs, one models", {
boots <- bootstrapper(m0, m1 = NULL, functional = identity, n_reps = 2)
expect_equal(length(boots), 2)
})
devtools::load_all(".")
test_that("bootstrapper runs, two models.", {
boots <- bootstrapper(m0, m1, functional = identity, n_reps = 1)
expect_equal(dim(boots), c(2, 1))
})
test_that("bootstrapper runs, one models", {
boots <- bootstrapper(m0, m1 = NULL, functional = identity, n_reps = 2)
expect_equal(length(boots), 2)
})
?lavaan::lavaan
lavaan::lavaan(model, psych::bfi[1:n, 1:10], estimator = "MLM")
model
model <- "A =~ A1+A2+A3+A4+A5;
C =~ C1+C2+C3+C4+C5"
n <- 50
lavaan::cfa(model, psych::bfi[1:n, 1:10], estimator = "MLM")
model <- "A =~ A1+A2+A3+A4+A5;
C =~ C1+C2+C3+C4+C5"
n <- 50
lavaan::lavaan(model, psych::bfi[1:n, 1:10], estimator = "MLM")
model <- "A =~ A1+A2+A3+A4+A5;
C =~ C1+C2+C3+C4+C5"
n <- 50
lavaan::lavaan(model = model, data = psych::bfi[1:n, 1:10])
obj@Options
object@Options
View(object@Options)
model <- "A =~ A1+A2+A3+A4+A5;
C =~ C1+C2+C3+C4+C5"
n <- 50
lavaan::lavaan(model = model, data = psych::bfi[1:n, 1:10])
model <- "A =~ A1+A2+A3+A4+A5;
C =~ C1+C2+C3+C4+C5"
n <- 50
lavaan::lavaan(model = model, data = psych::bfi[1:n, 1:10])
lavaan::cfa(model, psych::bfi[1:n, 1:10])
lavaan::cfa(model, psych::bfi[1:n, 1:10], control = list(iter.max = 10))
devtools::load_all(".")
test_that("bootstrapper runs, two models.", {
boots <- bootstrapper(m0, m1, functional = identity, n_reps = 1)
expect_equal(dim(boots), c(2, 1))
})
m0 <- lavaan::cfa(model, psych::bfi[1:n, 1:10])
ns <- m0@Data@nobs
ids <- lapply(ns, function(n) sample(x = n, size = n, replace = TRUE))
boot_sample <- lavaan::lav_data_update(
lavdata = m0@Data,
newX = lapply(seq_along(ns), function(i) data[[i]][ids[[i]], ]),
lavoptions = lavaan::lavInspect(m0, "options")
)
boot_m0 <- lavaan::lavaan(
slotOptions = m0@Options,
slotParTable = m0@ParTable,
slotData = boot_sample,
control = list(iter.max = 10)
)
boot_m0 <- lavaan::lavaan(
slotOptions = m0@Options,
slotParTable = m0@ParTable,
slotData = boot_sample
)
model <- "A =~ A1+A2+A3+A4+A5;
C =~ C1+C2+C3+C4+C5"
n <- 50
lavaan::lavaan(model = model, data = psych::bfi[1:n, 1:10])
model <- "A =~ A1+A2+A3+A4+A5;
C =~ C1+C2+C3+C4+C5"
n <- 50
#lavaan::lavaan(model = model, data = psych::bfi[1:n, 1:10])
m0 <- lavaan::cfa(model, psych::bfi[1:n, 1:10])
ns <- m0@Data@nobs
ids <- lapply(ns, function(n) sample(x = n, size = n, replace = TRUE))
boot_sample <- lavaan::lav_data_update(
lavdata = m0@Data,
newX = lapply(seq_along(ns), function(i) data[[i]][ids[[i]], ]),
lavoptions = lavaan::lavInspect(m0, "options")
)
boot_m0 <- lavaan::lavaan(
slotOptions = m0@Options,
slotParTable = m0@ParTable,
slotData = boot_sample
)
m0@Options
model <- "A =~ A1+A2+A3+A4+A5;
C =~ C1+C2+C3+C4+C5"
n <- 50
#lavaan::lavaan(model = model, data = psych::bfi[1:n, 1:10])
m0 <- lavaan::cfa(model, psych::bfi[1:n, 1:10])
ns <- m0@Data@nobs
ids <- lapply(ns, function(n) sample(x = n, size = n, replace = TRUE))
boot_sample <- lavaan::lav_data_update(
lavdata = m0@Data,
newX = lapply(seq_along(ns), function(i) data[[i]][ids[[i]], ]),
lavoptions = lavaan::lavInspect(m0, "options")
)
boot_m0 <- lavaan::lavaan(
slotOptions = m0@Options,
slotParTable = m0@ParTable,
slotData = boot_sample
)
ns
boot_sample
str(boot_sample)
model <- "A =~ A1+A2+A3+A4+A5;
C =~ C1+C2+C3+C4+C5"
n <- 50
#lavaan::lavaan(model = model, data = psych::bfi[1:n, 1:10])
m0 <- lavaan::cfa(model, psych::bfi[1:n, 1:10])
ns <- m0@Data@nobs
ids <- lapply(ns, function(n) sample(x = n, size = n, replace = TRUE))
boot_sample <- lavaan::lav_data_update(
lavdata = m0@Data,
newX = lapply(seq_along(ns), function(i) data[[i]][ids[[i]], ]),
lavoptions = lavaan::lavInspect(m0, "options")
)
boot_m0 <- lavaan::lavaan(
slotOptions = m0@Options,
slotParTable = m0@ParTable,
slotData = boot_sample
)
styler:::style_active_pkg()
data
data <- bollen_stine_transform(m0)
ns <- m0@Data@nobs
ids <- lapply(ns, function(n) sample(x = n, size = n, replace = TRUE))
boot_sample <- lavaan::lav_data_update(
lavdata = m0@Data,
newX = lapply(seq_along(ns), function(i) data[[i]][ids[[i]], ]),
lavoptions = lavaan::lavInspect(m0, "options")
)
boot_m0 <- lavaan::lavaan(
slotOptions = m0@Options,
slotParTable = m0@ParTable,
slotData = boot_sample
)
boot_m0
boot_m0 <- lavaan::lavaan(
slotOptions = m0@Options,
slotParTable = m0@ParTable,
slotData = boot_sample,
list = control(iter.max = 10)
)
boot_m0 <- lavaan::lavaan(
slotOptions = m0@Options,
slotParTable = m0@ParTable,
slotData = boot_sample,
control = list(iter.max = 10)
)
boot_m0
m1
devtools::load_all(".")
test_that("bootstrapper runs, two models.", {
boots <- bootstrapper(m0, m1, functional = identity, n_reps = 1)
expect_equal(dim(boots), c(2, 1))
})
test_that("bootstrapper runs, one models", {
boots <- bootstrapper(m0, m1 = NULL, functional = identity, n_reps = 2)
expect_equal(length(boots), 2)
})
bootstrap(m0, data = )
bootstrap(m0, data)
bootstrap(m0, NULL, data)
devtools::load_all(".")
bootstrap(m0, NULL, data)
bootstrap(m0, NULL, data) -> boots
functional(boots)
pvalues(boots)
devtools::load_all(".")
bootstrap(m0, NULL, data) -> boots
pvalues(boots)
test_that("bootstrapper runs, one models", {
boots <- bootstrapper(m0, m1 = NULL, functional = identity, n_reps = 2)
expect_equal(length(boots), 2)
})
test_that("bootstrapper runs, one models", {
boots <- bootstrapper(m0, m1 = NULL, functional = identity, n_reps = 1)
expect_equal(length(boots), 2)
})
styler:::style_active_pkg()
library(semselector)
library(semselector)
840 * 3
scan("workspace/times.dat")
model <- "A =~ A1+A2+A3+A4+A5;
C =~ C1+C2+C3+C4+C5"
n <- 50
object <- lavaan::sem(model, psych::bfi[1:n, 1:10], estimator = "MLM")
data <- bollen_stine_transform(m0)
devtools::load_all(".")
set.seed(313)
sel <- semselector(object, n_reps = 2, unbiased = 3, distances = "anderson-darling")
expect_equal(dim(sel), c(1, 3))
sel
attributes(sel)
sel <- semselector(object, n_reps = 2, unbiased = 3)
sel
sel <- semselector(object, n_reps = 5, unbiased = 3, distances = "anderson-darling")
sel
sel <- semselector(object, n_reps = 5, unbiased = 3)
attributes(sel)
library(semselector)
reticulate::repl_python()
import numpy as np
import seaborn as sns
import matplotlib.pylab as plt
rng = np.random.default_rng(seed=313)
x = rng.exponential(2, (10000, 10))
medians = np.median(x, axis = 1)
sns.histplot(medians, stat="density")
plt.show()
2 * log(2)
2 * np.log(2)
rng = np.random.default_rng(seed=313)
x = rng.exponential(2, 100)
sns.ecdfplot(x)
y = np.linspace(0, 3, 100)
sns.plot(x, 1/2*np.exp(-x*2))
rng = np.random.default_rng(seed=313)
x = rng.exponential(2, 100)
sns.ecdfplot(x)
y = np.linspace(0, 3, 100)
plt.plot(x, 1/2*np.exp(-x*2))
plt.show()
plt.clf()
rng = np.random.default_rng(seed=313)
x = rng.exponential(2, 100)
sns.ecdfplot(x)
y = np.linspace(0, 3, 100)
plt.plot(x, 1/2*np.exp(-y*2))
plt.show()
plt.clf()
rng = np.random.default_rng(seed=313)
x = rng.exponential(2, 100)
sns.ecdfplot(x)
y = np.linspace(0, 3, 100)
plt.plot(y, 1/2*np.exp(-y*2))
plt.show()
rng = np.random.default_rng(seed=313)
x = rng.exponential(2, 100)
sns.ecdfplot(x)
y = np.linspace(0, 3, 100)
plt.plot(y, 1 - np.exp(-y*2))
plt.show()
plt.clf()
rng = np.random.default_rng(seed=313)
x = rng.exponential(2, 100)
sns.ecdfplot(x)
y = np.linspace(0, 3, 100)
plt.plot(y, 1 - np.exp(-y/2))
plt.show()
rng = np.random.default_rng(seed=313)
x = rng.exponential(2, 100)
sns.ecdfplot(x)
y = np.linspace(0, np.max(x), 100)
plt.plot(y, 1 - np.exp(-y/2))
plt.show()
plt.clf()
rng = np.random.default_rng(seed=313)
x = rng.exponential(2, 100)
sns.ecdfplot(x)
y = np.linspace(0, np.max(x), 100)
plt.plot(y, 1 - np.exp(-y/2))
plt.show()
